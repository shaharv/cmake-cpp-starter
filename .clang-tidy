---
Checks:
    -*,
    bugprone-*, -bugprone-easily-swappable-parameters, -bugprone-exception-escape, -bugprone-forward-declaration-namespace, -bugprone-unchecked-optional-access, -bugprone-chained-comparison,
    clang-analyzer-core.*,
    clang-analyzer-cplusplus.*,
    clang-analyzer-deadcode.*,
    clang-analyzer-nullability.*,
    clang-analyzer-unix.*,
    concurrency-mt-unsafe,
    cppcoreguidelines-avoid-goto,
    cppcoreguidelines-init-variables,
    cppcoreguidelines-misleading-capture-default-by-value,
    cppcoreguidelines-missing-std-forward,
    cppcoreguidelines-no-malloc,
    cppcoreguidelines-prefer-member-initializer,
    cppcoreguidelines-pro-type-cstyle-cast,
    cppcoreguidelines-pro-type-member-init,
    cppcoreguidelines-pro-type-static-cast-downcast,
    cppcoreguidelines-pro-type-union-access,
    cppcoreguidelines-pro-type-vararg,
    cppcoreguidelines-virtual-class-destructor,
    google-build-namespaces,
    google-default-arguments,
    google-explicit-constructor,
    google-global-names-in-headers,
    google-readability-*, -google-readability-todo,
    google-runtime-references,
    hicpp-exception-baseclass,
    hicpp-multiway-paths-covered,
    llvm-include-order,
    llvm-namespace-comment,
    misc-const-correctness,
    misc-definitions-in-headers,
    misc-header-include-cycle,
    misc-include-cleaner,
    misc-misleading-bidirectional,
    misc-misleading-identifier,
    misc-misplaced-const,
    misc-new-delete-overloads,
    misc-non-copyable-objects,
    misc-non-private-member-variables-in-classes,
    misc-redundant-expression,
    misc-static-assert,
    misc-throw-by-value-catch-by-reference,
    misc-unconventional-assign-operator,
    misc-uniqueptr-reset-release,
    misc-unused-alias-decls,
    misc-unused-using-decls,
    misc-use-anonymous-namespace,
    modernize-concat-nested-namespaces,
    modernize-deprecated-headers,
    modernize-loop-convert,
    modernize-macro-to-enum,
    modernize-make-shared,
    modernize-make-unique,
    modernize-use-bool-literals,
    modernize-use-emplace,
    modernize-use-equals-default,
    modernize-use-override,
    modernize-use-starts-ends-with,
    modernize-use-using,
    performance*, -performance-avoid-endl, -performance-enum-size,
    readability-avoid-const-params-in-decls,
    readability-const-return-type,
    readability-container-contains,
    readability-container-data-pointer,
    readability-container-size-empty,
    readability-convert-member-functions-to-static,
    readability-duplicate-include,
    readability-else-after-return,
    readability-identifier-naming,
    readability-implicit-bool-conversion,
    readability-inconsistent-declaration-parameter-name,
    readability-isolate-declaration,
    readability-make-member-function-const,
    readability-misleading-indentation,
    readability-named-parameter,
    readability-non-const-parameter,
    readability-qualified-auto,
    readability-redundant-casting,
    readability-redundant-inline-specifier,
    readability-reference-to-constructed-temporary,
    readability-simplify-boolean-expr,
    readability-simplify-subscript-expr,
    readability-static-accessed-through-instance,
    readability-string-compare

WarningsAsErrors:   '*'
FormatStyle:        none
HeaderFilterRegex:  '.*'
CheckOptions:
    - { key: misc-const-correctness.AnalyzeValues, value: false }
    - { key: misc-const-correctness.AnalyzeReferences, value: true }
    - { key: misc-const-correctness.WarnPointersAsValues, value: true }
    - { key: misc-const-correctness.TransformReferences, value: true }
    - { key: misc-const-correctness.TransformPointersAsValues, value: false }
    - { key: misc-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic, value: true }
    - { key: performance-move-const-arg.CheckTriviallyCopyableMove, value: false }
    - { key: readability-identifier-naming.ClassCase, value: CamelCase }
    - { key: readability-identifier-naming.ClassMemberCase, value: camelBack }
    - { key: readability-identifier-naming.ClassMethodCase, value: camelBack }
    - { key: readability-identifier-naming.ConstexprVariableCase, value: UPPER_CASE }
    - { key: readability-identifier-naming.EnumCase, value: CamelCase }
    - { key: readability-identifier-naming.FunctionCase, value: camelBack }
    - { key: readability-identifier-naming.GlobalConstantCase, value: UPPER_CASE }
    - { key: readability-identifier-naming.MemberCase, value: camelBack }
    - { key: readability-identifier-naming.MethodCase, value: camelBack }
    - { key: readability-identifier-naming.LocalPointerCase, value: camelBack }
    - { key: readability-identifier-naming.LocalVariableCase, value: camelBack }
    - { key: readability-identifier-naming.ParameterCase, value: camelBack }
    - { key: readability-identifier-naming.PrivateMemberCase, value: camelBack }
    - { key: readability-identifier-naming.PrivateMemberSuffix, value: '_' }
    - { key: readability-identifier-naming.ProtectedMemberCase, value: camelBack }
    - { key: readability-identifier-naming.ProtectedMemberSuffix, value: '_' }
    - { key: readability-identifier-naming.PublicMemberCase, value: camelBack }
    - { key: readability-identifier-naming.PublicMemberSuffix, value: '' }
    - { key: readability-identifier-naming.StructCase, value: CamelCase }
    - { key: readability-identifier-naming.TypedefCase, value: CamelCase }
    - { key: readability-identifier-naming.UnionCase, value: CamelCase }
    - { key: readability-identifier-naming.VariableCase, value: camelBack }
...
